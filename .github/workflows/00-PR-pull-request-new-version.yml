name: New version PR

on:
  workflow_call:
    inputs:
      new_version:
        required: true
        type: string
      environment:
        required: false
        type: string
        default: dev
      projectId:
        required: true
        type: string
      deployId:
        required: true
        type: string

jobs:
  prepare:
    name: Deploy Production Hosts - prepare
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Update environment.ts version
        run: |
          FILE="src/environment/environment.ts"
          echo "Updating $FILE to version ${{ steps.set-version.outputs.new_version }}"
          sed -i "s/version: '[^']*'/version: '${{ steps.set-version.outputs.new_version }}'/" "$FILE"
          echo "Resulting version line:" && grep -n "version:" "$FILE" || true

      - name: Show git status
        run: git status

      - name: Commit new version
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add src/environment/environment.ts
          git commit -m "New version release: v${{ inputs.new_version }}"

  status_create_pr_start:
    name: Status -> create_pr START
    needs: prepare

    uses: ./.github/workflows/02-Status-handler.yml
    with:
      projectId: ${{ inputs.projectId }}
      deployId: ${{ inputs.deployId }}
      status: generate_pr

  create_pr:
    name: Create PR
    needs: status_create_pr_start
    runs-on: ubuntu-latest
    steps:
      - name: Create PR (placeholder)
        run: exit 1

  status_create_pr_error:
    name: Status -> create_pr ERROR
    needs: create_pr
    if: ${{ needs.create_pr.result != 'success' }}
    uses: ./.github/workflows/02-Status-handler.yml
    with:
      projectId: ${{ inputs.projectId }}
      deployId: ${{ inputs.deployId }}
      error: true

  status_approve_pr_start:
    name: Status -> approve_pr START
    needs: create_pr
    if: ${{ needs.create_pr.result == 'success' }}
    uses: ./.github/workflows/02-Status-handler.yml
    with:
      projectId: ${{ inputs.projectId }}
      deployId: ${{ inputs.deployId }}
      status: approve_pr

  approve_pr:
    name: Approve PR
    needs: status_approve_pr_start
    if: ${{ needs.create_pr.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Approve PR via PAT
        id: approve_pr
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            await github.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ needs.create_pr.outputs.pull-request-number }},
              event: "APPROVE"
            })

  status_approve_pr_error:
    name: Status -> approve_pr ERROR
    needs: approve_pr
    if: ${{ needs.approve_pr.result != 'success' }}
    uses: ./.github/workflows/02-Status-handler.yml
    with:
      projectId: ${{ inputs.projectId }}
      deployId: ${{ inputs.deployId }}
      error: true

  status_merge_pr_start:
    name: Status -> merge_pr START
    needs: approve_pr
    if: ${{ needs.approve_pr.result == 'success' }}
    uses: ./.github/workflows/02-Status-handler.yml
    with:
      projectId: ${{ inputs.projectId }}
      deployId: ${{ inputs.deployId }}
      status: merge_pr

  merge_pr:
    name: Merge PR
    needs: status_merge_pr_start
    if: ${{ needs.approve_pr.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Merge PR via PAT
        id: merge_pr
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            await github.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ needs.create_pr.outputs.pull-request-number }},
              merge_method: "merge"
            })

  status_merge_pr_error:
    name: Status -> merge_pr ERROR
    needs: merge_pr
    if: ${{ needs.merge_pr.result != 'success' }}
    uses: ./.github/workflows/02-Status-handler.yml
    with:
      projectId: ${{ inputs.projectId }}
      deployId: ${{ inputs.deployId }}
      error: true
